{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Danny/Desktop/Coding/test-project/src/app/api/verify/route.ts"],"sourcesContent":["import { Jimp } from \"jimp\";\r\nimport { NextRequest } from \"next/server\";\r\nimport Tesseract from \"tesseract.js\";\r\n\r\nconst extractCnicNumber = (ocrText: string) => {\r\n  // It has the format \"12345-1234567-1\"\r\n  const cnicRegex = /\\b\\d{5}-\\d{7}-\\d\\b/;\r\n\r\n  // Extract any 13 digit number that might be a CNIC\r\n  const cnicRegex2 = /\\b\\d{13}\\b/; // Uncomment this line if you want to match a 13-digit CNIC without hyphens\r\n  const match = ocrText.match(cnicRegex);\r\n  // Remove the hyphen from the CNIC number\r\n  const match2 = ocrText.match(cnicRegex2);\r\n  if (match) {\r\n    return match[0].replace(/-/g, \"\"); // Remove hyphens\r\n  }\r\n\r\n  if (match2) {\r\n    return match2[0]; // Return the 13-digit CNIC number\r\n  }\r\n  return null;\r\n};\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const formData = await req.formData();\r\n    const frontCnic = formData.get(\"frontCnic\") as File;\r\n    const backCnic = formData.get(\"backCnic\") as File;\r\n\r\n    console.log(\"Received files:\", {\r\n      frontCnic: frontCnic?.name,\r\n      backCnic: backCnic?.name,\r\n      frontCnicSize: frontCnic?.size,\r\n      backCnicSize: backCnic?.size,\r\n    });\r\n\r\n    if (!frontCnic || !backCnic) {\r\n      return new Response(\r\n        JSON.stringify({\r\n          error: \"Both front and back CNIC images are required.\",\r\n        }),\r\n        {\r\n          status: 400,\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n        }\r\n      );\r\n    }\r\n\r\n    // Convert File objects to Buffer for Tesseract\r\n    const frontBuffer = Buffer.from(await frontCnic.arrayBuffer());\r\n    const backBuffer = Buffer.from(await backCnic.arrayBuffer());\r\n\r\n    const frontImage = await Jimp.read(frontBuffer);\r\n    const backImage = await Jimp.read(backBuffer);\r\n\r\n    frontImage.greyscale();\r\n    backImage.greyscale();\r\n\r\n    const threshold = 220; // Adjust this value (0-255) to control sensitivity\r\n\r\n    frontImage.scan(\r\n      0,\r\n      0,\r\n      frontImage.bitmap.width,\r\n      frontImage.bitmap.height,\r\n      function (x, y, idx) {\r\n        // Get the red channel value (same as green and blue in grayscale)\r\n        const grey = frontImage.bitmap.data[idx];\r\n\r\n        // If pixel is darker than threshold, make it black, otherwise white\r\n        if (grey < threshold) {\r\n          frontImage.bitmap.data[idx] = 0; // Red\r\n          frontImage.bitmap.data[idx + 1] = 0; // Green\r\n          frontImage.bitmap.data[idx + 2] = 0; // Blue\r\n        } else {\r\n          frontImage.bitmap.data[idx] = 255; // Red\r\n          frontImage.bitmap.data[idx + 1] = 255; // Green\r\n          frontImage.bitmap.data[idx + 2] = 255; // Blue\r\n        }\r\n        // Alpha channel (idx + 3) remains unchanged\r\n      }\r\n    );\r\n\r\n    backImage.scan(\r\n      0,\r\n      0,\r\n      backImage.bitmap.width,\r\n      backImage.bitmap.height,\r\n      function (x, y, idx) {\r\n        const grey = backImage.bitmap.data[idx];\r\n\r\n        if (grey < threshold) {\r\n          backImage.bitmap.data[idx] = 0; // Red\r\n          backImage.bitmap.data[idx + 1] = 0; // Green\r\n          backImage.bitmap.data[idx + 2] = 0; // Blue\r\n        } else {\r\n          backImage.bitmap.data[idx] = 255; // Red\r\n          backImage.bitmap.data[idx + 1] = 255; // Green\r\n          backImage.bitmap.data[idx + 2] = 255; // Blue\r\n        }\r\n      }\r\n    );\r\n\r\n    const workerFront = await Tesseract.createWorker(\"eng\");\r\n    const workerBack = await Tesseract.createWorker(\"eng\");\r\n    const [frontText, backText] = await Promise.all([\r\n      workerFront.recognize(frontBuffer),\r\n      workerBack.recognize(backBuffer),\r\n    ]);\r\n\r\n    // Clean up workers\r\n    await workerFront.terminate();\r\n    await workerBack.terminate();\r\n\r\n    console.log(\"Front CNIC OCR Text:\", frontText.data.text);\r\n    console.log(\"Back CNIC OCR Text:\", backText.data.text);\r\n\r\n    const frontCnicNumber = extractCnicNumber(frontText.data.text);\r\n    const backCnicNumber = extractCnicNumber(backText.data.text);\r\n\r\n    console.log(\"Extracted Front CNIC Number:\", frontCnicNumber);\r\n    console.log(\"Extracted Back CNIC Number:\", backCnicNumber);\r\n\r\n    if (!frontCnicNumber || !backCnicNumber) {\r\n      return new Response(\r\n        JSON.stringify({\r\n          error: \"Failed to extract CNIC numbers from the images.\",\r\n        }),\r\n        {\r\n          status: 400,\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n        }\r\n      );\r\n    }\r\n\r\n    if (frontCnicNumber === backCnicNumber) {\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: true,\r\n          message: \"CNIC numbers match.\",\r\n          frontCnicNumber,\r\n          backCnicNumber,\r\n        }),\r\n        {\r\n          status: 200,\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n        }\r\n      );\r\n    } else {\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: \"CNIC numbers do not match.\",\r\n          frontCnicNumber,\r\n          backCnicNumber,\r\n        }),\r\n        {\r\n          status: 400,\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n        }\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error processing CNIC validation:\", error);\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        error: \"Internal server error during CNIC validation.\",\r\n      }),\r\n      {\r\n        status: 500,\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AAEA;;;AAEA,MAAM,oBAAoB,CAAC;IACzB,sCAAsC;IACtC,MAAM,YAAY;IAElB,mDAAmD;IACnD,MAAM,aAAa,cAAc,2EAA2E;IAC5G,MAAM,QAAQ,QAAQ,KAAK,CAAC;IAC5B,yCAAyC;IACzC,MAAM,SAAS,QAAQ,KAAK,CAAC;IAC7B,IAAI,OAAO;QACT,OAAO,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,KAAK,iBAAiB;IACtD;IAEA,IAAI,QAAQ;QACV,OAAO,MAAM,CAAC,EAAE,EAAE,kCAAkC;IACtD;IACA,OAAO;AACT;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,WAAW,MAAM,IAAI,QAAQ;QACnC,MAAM,YAAY,SAAS,GAAG,CAAC;QAC/B,MAAM,WAAW,SAAS,GAAG,CAAC;QAE9B,QAAQ,GAAG,CAAC,mBAAmB;YAC7B,WAAW,WAAW;YACtB,UAAU,UAAU;YACpB,eAAe,WAAW;YAC1B,cAAc,UAAU;QAC1B;QAEA,IAAI,CAAC,aAAa,CAAC,UAAU;YAC3B,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBACb,OAAO;YACT,IACA;gBACE,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;QAEJ;QAEA,+CAA+C;QAC/C,MAAM,cAAc,OAAO,IAAI,CAAC,MAAM,UAAU,WAAW;QAC3D,MAAM,aAAa,OAAO,IAAI,CAAC,MAAM,SAAS,WAAW;QAEzD,MAAM,aAAa,MAAM,8JAAA,CAAA,OAAI,CAAC,IAAI,CAAC;QACnC,MAAM,YAAY,MAAM,8JAAA,CAAA,OAAI,CAAC,IAAI,CAAC;QAElC,WAAW,SAAS;QACpB,UAAU,SAAS;QAEnB,MAAM,YAAY,KAAK,mDAAmD;QAE1E,WAAW,IAAI,CACb,GACA,GACA,WAAW,MAAM,CAAC,KAAK,EACvB,WAAW,MAAM,CAAC,MAAM,EACxB,SAAU,CAAC,EAAE,CAAC,EAAE,GAAG;YACjB,kEAAkE;YAClE,MAAM,OAAO,WAAW,MAAM,CAAC,IAAI,CAAC,IAAI;YAExC,oEAAoE;YACpE,IAAI,OAAO,WAAW;gBACpB,WAAW,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,MAAM;gBACvC,WAAW,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,QAAQ;gBAC7C,WAAW,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,OAAO;YAC9C,OAAO;gBACL,WAAW,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,KAAK,MAAM;gBACzC,WAAW,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,QAAQ;gBAC/C,WAAW,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,OAAO;YAChD;QACA,4CAA4C;QAC9C;QAGF,UAAU,IAAI,CACZ,GACA,GACA,UAAU,MAAM,CAAC,KAAK,EACtB,UAAU,MAAM,CAAC,MAAM,EACvB,SAAU,CAAC,EAAE,CAAC,EAAE,GAAG;YACjB,MAAM,OAAO,UAAU,MAAM,CAAC,IAAI,CAAC,IAAI;YAEvC,IAAI,OAAO,WAAW;gBACpB,UAAU,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,MAAM;gBACtC,UAAU,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,QAAQ;gBAC5C,UAAU,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,OAAO;YAC7C,OAAO;gBACL,UAAU,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,KAAK,MAAM;gBACxC,UAAU,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,QAAQ;gBAC9C,UAAU,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,OAAO;YAC/C;QACF;QAGF,MAAM,cAAc,MAAM,uHAAA,CAAA,UAAS,CAAC,YAAY,CAAC;QACjD,MAAM,aAAa,MAAM,uHAAA,CAAA,UAAS,CAAC,YAAY,CAAC;QAChD,MAAM,CAAC,WAAW,SAAS,GAAG,MAAM,QAAQ,GAAG,CAAC;YAC9C,YAAY,SAAS,CAAC;YACtB,WAAW,SAAS,CAAC;SACtB;QAED,mBAAmB;QACnB,MAAM,YAAY,SAAS;QAC3B,MAAM,WAAW,SAAS;QAE1B,QAAQ,GAAG,CAAC,wBAAwB,UAAU,IAAI,CAAC,IAAI;QACvD,QAAQ,GAAG,CAAC,uBAAuB,SAAS,IAAI,CAAC,IAAI;QAErD,MAAM,kBAAkB,kBAAkB,UAAU,IAAI,CAAC,IAAI;QAC7D,MAAM,iBAAiB,kBAAkB,SAAS,IAAI,CAAC,IAAI;QAE3D,QAAQ,GAAG,CAAC,gCAAgC;QAC5C,QAAQ,GAAG,CAAC,+BAA+B;QAE3C,IAAI,CAAC,mBAAmB,CAAC,gBAAgB;YACvC,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBACb,OAAO;YACT,IACA;gBACE,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;QAEJ;QAEA,IAAI,oBAAoB,gBAAgB;YACtC,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBACb,SAAS;gBACT,SAAS;gBACT;gBACA;YACF,IACA;gBACE,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;QAEJ,OAAO;YACL,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBACb,SAAS;gBACT,OAAO;gBACP;gBACA;YACF,IACA;gBACE,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;QAEJ;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YACb,SAAS;YACT,OAAO;QACT,IACA;YACE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IAEJ;AACF","debugId":null}}]
}